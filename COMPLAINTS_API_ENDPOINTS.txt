Complaints & Reports API Guide (Frontend)
Updated: 2025-08-27

Overview
- Purpose: Allow managers to report employees to HR, and employees to submit complaints to HR (and CEO when needed).
- Base URL examples:
  - Local: http://127.0.0.1:8000
  - Prod (example): https://hrms-django-backend.onrender.com
- All endpoints are under /api/ and require JWT auth unless noted.
- Provide Authorization header: Authorization: Bearer <JWT>

Roles & access
- Employee: can create complaints and list/view only their own complaints.
- Manager: can create manager reports; list/view complaints they created plus complaints about users in their department.
- HR/CEO: can list/view all complaints; can update complaint status.

Model fields
- id: number
- type: "manager_report" | "employee_complaint"
- subject: string (<= 255 chars)
- description: string
- created_by: read-only object (id, email, first_name, last_name, role)
- target_user: optional number (user id) â€“ typically required for manager reports
- target_user_detail: read-only object (id, email, first_name, last_name, role)
- send_to_ceo: boolean (employee complaints should set this true)
- status: "open" | "in_review" | "resolved" | "dismissed" (read-only at create; HR/CEO can change)
- created_at: ISO datetime
- updated_at: ISO datetime

Email notifications
- On create: emails all active HR users.
- If send_to_ceo is true: also emails all active CEO users.

Pagination
- Standard DRF page format with keys: count, next, previous, results
- Default page size: 10

Endpoints

1) Create a complaint/report
POST /api/complaints/
Headers: Content-Type: application/json, Authorization: Bearer <JWT>

1.a) As Manager: report an employee to HR
Request body:
{
  "type": "manager_report",
  "subject": "Repeated late arrivals",
  "description": "Employee has been late 5 times this month.",
  "target_user": 123,
  "send_to_ceo": false
}

1.b) As Employee: complaint to HR and CEO
Request body:
{
  "type": "employee_complaint",
  "subject": "Harassment report",
  "description": "Details of the incident...",
  "send_to_ceo": true
}

Response 201 (example):
{
  "id": 45,
  "type": "employee_complaint",
  "subject": "Harassment report",
  "description": "Details of the incident...",
  "created_by": { "id": 17, "email": "me@example.com", "first_name": "Jane", "last_name": "Doe", "role": "employee" },
  "target_user": null,
  "target_user_detail": null,
  "send_to_ceo": true,
  "status": "open",
  "created_at": "2025-08-27T12:34:56Z",
  "updated_at": "2025-08-27T12:34:56Z"
}

Possible 400 errors:
- { "type": ["Employees can only create employee complaints."] }
- { "type": ["Managers can only create manager reports."] }
- { "target_user": ["This field is required."] } (if your UI enforces it for manager reports)

2) List complaints (paginated)
GET /api/complaints/?page=1
Headers: Authorization: Bearer <JWT>

Response 200 (example):
{
  "count": 23,
  "next": "http://127.0.0.1:8000/api/complaints/?page=2",
  "previous": null,
  "results": [
    {
      "id": 45,
      "type": "employee_complaint",
      "subject": "Harassment report",
      "description": "Details of the incident...",
      "created_by": { "id": 17, "email": "me@example.com", "first_name": "Jane", "last_name": "Doe", "role": "employee" },
      "target_user": null,
      "target_user_detail": null,
      "send_to_ceo": true,
      "status": "open",
      "created_at": "2025-08-27T12:34:56Z",
      "updated_at": "2025-08-27T12:34:56Z"
    }
  ]
}

Visibility rules recap for list:
- HR/CEO: all complaints.
- Manager: own-created + complaints about users in manager's department.
- Employee: only own-created.

3) Retrieve complaint by id
GET /api/complaints/{id}/
Headers: Authorization: Bearer <JWT>

Response 200 (example): same object as in list results.
Response 404: if not found or no access.

4) Update complaint status (HR/CEO only)
POST /api/complaints/{id}/set-status
Headers: Content-Type: application/json, Authorization: Bearer <JWT>
Body:
{ "status": "in_review" }

Allowed statuses: open, in_review, resolved, dismissed

Response 200:
{ "detail": "Status updated." }

Response 400 (invalid):
{ "detail": "Invalid status." }

Related endpoints useful to build UIs
- Fetch high-level users (HR, Managers, CEO):
  GET /api/high-level-users/
  Response 200: [ { "id": 1, "email": "hr@example.com", "first_name": "...", "last_name": "...", "role": "hr" }, ... ]

- Fetch users to pick a target employee (Manager sees only their department):
  GET /api/users?role=employee
  Optional filter: GET /api/users?department=<id>

Notes for frontend
- Always display status and update timestamp; only HR/CEO should see a control to change status.
- For manager reports, require selecting a target employee.
- For employee complaints, surface a toggle for "Also notify CEO" (send_to_ceo), default true.
- After creating a complaint, the list/detail will show created_by and target_user_detail objects for display.
- Email sending is backend-only; UI just shows success.
