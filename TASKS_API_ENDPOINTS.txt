TASKS API - Endpoints, payloads & sample responses

Auth: all endpoints require authentication (JWT or session). Use header:
  Authorization: Bearer <access_token>

Notes on roles (from hr.CustomUser.role): CEO, HR, Manager, Employee.
Permissions summary (current implementation):
- CEO / HR: full access to all tasks (create, read, update, delete, assign).
- Manager: can create and manage tasks for their department, tasks they created, or tasks they assigned.
- Employee: can view tasks they created or are assigned to; assignees currently pass object-permission checks and therefore can update tasks (no field-level restriction implemented yet).

Resources
1) Tasks collection
  URL: /api/tasks/
  Methods:
    - GET: list tasks visible to the authenticated user (paginated)
        Query params: search=<text>, ordering=due_date|priority|created_at, page=<n>
      Sample response (200):
        {
          "count": 1,
          "next": null,
          "previous": null,
          "results": [
            {
              "id": 42,
              "title": "Quarterly Report",
              "description": "Prepare Q3 report",
              "creator": 3,
              "assigned_by": 3,
              "assignees": [5],
              "department": 2,
              "priority": "high",
              "status": "todo",
              "due_date": "2025-09-30T17:00:00Z",
              "estimate_hours": "8.00",
              "completed_at": null,
              "created_at": "2025-08-22T12:00:00Z",
              "updated_at": "2025-08-22T12:00:00Z"
            }
          ]
        }

    - POST: create a new task
      Payload example:
        {
          "title": "Quarterly Report",
          "description": "Compile and submit Q3 report",
          "department": 2,               # optional, department id
          "assignees": [5],             # optional list of user ids
          "priority": "high",         # low|medium|high|critical
          "due_date": "2025-09-30T17:00:00Z",
          "estimate_hours": "8.00"
        }
      Successful response (201): same object as single GET (includes assigned_by and creator set to request.user)
      Permissions: CEO/HR allowed; Managers allowed to create; Employees technically allowed to create only if permission logic changed — current CanManageTasks allows only HR/CEO/managers to create.

2) Task detail
  URL: /api/tasks/{id}/
  Methods:
    - GET: retrieve task detail (200)
    - PUT/PATCH: update task (allowed per permission matrix; note assignees currently can update the object unless field-level checks are added)
      Payload (PATCH example):
        {"status": "in_progress", "priority": "medium"}
    - DELETE: soft-delete (sets deleted_at) — allowed for HR/CEO and managers when in scope

    Sample GET response (200): same object shown in collection result.

3) Assign / Unassign actions
  URL: /api/tasks/{id}/assign/  (POST)
  Payload: {"assignees": [user_id, ...]}
  Success response (200):
    {"status": "assigned", "assignees": [5, 6]}
  Behavior:
    - Adds assignees (many-to-many) and creates TaskAssignment audit records.
    - Signals send an email to each assigned user's email (best-effort, fail_silently=True).
    - Permissions: CEO/HR allowed; Managers allowed within their department or for tasks they created/assigned; assignees cannot call assign (unless they meet manager/hr/ceo criteria).

  URL: /api/tasks/{id}/unassign/  (POST)
  Payload: {"assignees": [user_id, ...]}
  Success response (200): {"status": "unassigned", "assignees": [...]}

4) Mark done
  URL: /api/tasks/{id}/mark_done/  (POST)
  Payload: none
  Success response (200): {"status": "done", "completed_at": "2025-08-22T15:00:00Z"}
  Behavior: sets status to 'done' and completed_at timestamp.

5) Task comments
  Collection URL: /api/task-comments/
  Methods:
    - GET: list comments (only comments on tasks visible to the user)
    - POST: create comment
      Payload example: {"task": 42, "content": "Started work on this"}
      Response (201): {"id": 7, "task": 42, "author": 5, "content": "...", "created_at": "..."}

6) Task attachments
  Collection URL: /api/task-attachments/
  Methods:
    - GET: list attachments for tasks visible to user
    - POST: multipart form upload
      Form fields: file (binary), task (id)
      Response (201): {"id": 9, "task": 42, "uploaded_by": 5, "file": "/media/task_attachments/2025/08/22/filename.pdf", "uploaded_at": "..."}

7) Task assignment history
  Collection URL: /api/task-assignments/
  Methods:
    - GET: read-only list of TaskAssignment audit records
      Fields: id, task, assigned_to, assigned_by, created_at
      Managers see records for their department; HR/CEO see all; employees see records where they are assigned_to or assigned_by.

Authentication / Headers
  - Use JWT tokens (project uses djangorestframework-simplejwt). Include:
      Authorization: Bearer <access_token>
  - Alternatively the Django session cookie works for browser clients / test client.

Emails: Yes, the app sends emails
  - Implementation: signals in tasks.signals send email on two events:
      * post_save Task (created) -> notifies department.manager and task.creator (if emails present)
      * post_save TaskAssignment (created) -> notifies assigned user
  - Implementation detail: uses django.core.mail.send_mail(..., fail_silently=True) and DEFAULT_FROM_EMAIL from settings.
  - Action items: to actually send email set EMAIL_HOST_USER and EMAIL_HOST_PASSWORD and valid EMAIL settings in the environment. For production consider an async worker (Celery) to avoid blocking and send retries/logging.
  - In-app notifications: not implemented; only email signals exist. You can add a Notification model and create DB records in the signals for dashboard/UI consumption.

Caveats & next steps
  - Field-level permissions: currently assignees pass object permission checks and therefore may fully update tasks. If you want assignees to only change status/comments/time tracking, add serializer-level field write restrictions.
  - Attachment storage: MEDIA_ROOT used for development; configure S3 (django-storages) for production.
  - Notifications: move email sending to Celery tasks for reliability.
  - Audit & history: we create TaskAssignment audit records; add a TaskStatusHistory model if you need full status transition history.

File created: ./TASKS_API_ENDPOINTS.txt
